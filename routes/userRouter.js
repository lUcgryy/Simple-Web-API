const express = require('express');
const userRouter = express.Router();
const userController = require('../controllers/userController');
const authController = require('./../controllers/authController');
const transferController = require('./../controllers/transferController');

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - _id
 *         - email
 *         - role
 *         - username
 *         - password
 *         - money
 *         - resetToken
 *         - __v
 *       properties:
 *         _id:
 *           type: string
 *           description: The auto-generated id of the user
 *           readOnly: true
 *         name:
 *           type: string
 *           description: The name of the user
 *           maxLength: 40
 *         email:
 *           type: string
 *           description: The email of the user
 *           format: email
 *           unique: true 
 *         avatar:
 *           type: string
 *           description: The path of the avatar image of the user
 *         role:
 *           type: string
 *           description: The role of the user
 *           enum: [user, admin]
 *           default: user
 *         phone:
 *           type: string
 *           description: The phone number of the user
 *           maxLength: 11
 *           pattern: ^[0-9]{10,11}$
 *           default: 00000000000
 *         username:
 *           type: string
 *           description: The username of the user
 *           maxLength: 40
 *           unique: true
 *         password:
 *           type: string
 *           description: The hashed password of the user
 *           writeOnly: true
 *           minLength: 6
 *           format: password
 *         money:
 *           type: number
 *           description: The money of the user
 *           default: 0
 *           minimum: 0
 *         hasBought:
 *           description: The list of items which the user has bought 
 *           type: array
 *           items:
 *             type: object
 *             properties:
 *               item: 
 *                 $ref: '#/components/schemas/Item'
 *               time:
 *                 type: string
 *                 format: date-time
 *               quantity:
 *                 type: number
 *                 minimum: 1
 *         vip:
 *           description: The vip of the user (if the user has bought a vip)
 *           $ref: '#/components/schemas/Vip'
 *         expiredDate:
 *           type: string
 *           format: date-time
 *           description: The date when the vip of the user will be expired
 *         resetToken:
 *           type: string
 *           description: The token which is used to reset password, this token should be unique
 *           writeOnly: true
 *         __v:
 *          type: number
 *          description: The version key of the user which is automatically generated by MongoDB
 *          readOnly: true
 */

/**
 * @swagger
 * tags:
 *   name: Users
 *   description: The user managing API
 */

// login

/**
 * @swagger
 * /api/users/login:
 *  post:
 *    summary: Login to the API
 *    tags: [Users]
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            type: object
 *            properties:
 *              username:
 *                type: string
 *                description: The username of the user
 *                maxLength: 40
 *              password:
 *                type: string
 *                description: The password of the user
 *                minLength: 6
 * 
 *    responses:
 *      201:
 *        description: The user info and token
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  description: The status of the login
 *                  default: success
 *                accessToken:
 *                  type: string
 *                refreshToken:
 *                  type: string
 *                data:
 *                  $ref: '#/components/schemas/User'
 *      400:
 *        $ref: '#/components/responses/InformationError'
 *      401:
 *        $ref: '#/components/responses/LoginError'   
 */

// register

/**
 * @swagger
 * /api/users/register:
 *   post:
 *     summary: Register a new user
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *                 description: The email of the user
 *                 format: email
 *                 unique: true
 *               username:
 *                 type: string
 *                 description: The username of the user
 *                 maxLength: 40
 *                 unique: true
 *               password:
 *                 type: string
 *                 description: The password of the user
 *                 minLength: 6    
 *               passwordConfirm:    
 *                 type: string 
 *                 description: The password confirmation of the user 
 *                 minLength: 6
 *     responses:
 *       201:
 *        description: The user info and resetToken  
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  description: The status of the response
 *                  example: success
 *                data:
 *                  allOf:     
 *                    - $ref: '#/components/schemas/User'
 *                    - type: object
 *                      properties:
 *                        resetToken:
 *                          type: string
 *                          writeOnly: false                    
 *       400:    
 *          $ref: '#/components/responses/InformationError'
 *       500:
 *         $ref: '#/components/responses/ValidationError'
 *      
 */

// token

/**
 * @swagger
 * /api/users/token:
 *   get:
 *     summary: Get a new access token when the old access token is expired
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: The new access token
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: success
 *                 accessToken:
 *                   type: string
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError'
 *                  
 */

//me

/**
 * @swagger
 * /api/users/me:
 *  get:
 *    summary: Get current user
 *    tags: [Users]
 *    security:
 *      - bearerAuth: []
 *    responses:
 *      200:
 *        description: The user info
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  description: The status of the response
 *                  example: success
 *                data:
 *                  $ref: '#/components/schemas/User'
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *      404:
 *        $ref: '#/components/responses/NotFoundError'
 *  patch:
 *   summary: Update current user
 *   tags: [Users]
 *   security:
 *     - bearerAuth: []
 *   requestBody:
 *     required: true
 *     content:
 *       application/json:
 *         schema:
 *           type: object
 *           properties: 
 *             name:
 *              type: string
 *              example: user
 *             email:
 *              type: string
 *              description: The email of the user
 *              example: user@gmail.com
 *             phone:
 *              type: string
 *              example: 0123456789
 *   responses:
 *     200:
 *       description: The new user info
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *              status:
 *                type: string
 *                description: The status of the response
 *                example: success
 *              data:
 *                $ref: '#/components/schemas/User'
 *     400:
 *      $ref: '#/components/responses/InformationError'
 *     401:
 *      $ref: '#/components/responses/UnauthorizedError'
 *     404:
 *      $ref: '#/components/responses/NotFoundError'
 *     500:
 *      $ref: '#/components/responses/ValidationError'
 */

//change-password

/**
 * @swagger
 * /api/users/change-password:
 *  patch:
 *    summary: Change password of current user
 *    tags: [Users]
 *    security:
 *      - bearerAuth: []
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            type: object
 *            properties:
 *              oldPassword:
 *                type: string
 *              newPassword:
 *                type: string
 *              confirmPassword:
 *                type: string
 *    responses:
 *      200:
 *        description: The password is changed successfully
 *        content:
 *         application/json:
 *          schema:
 *            $ref: '#/components/schemas/Delete'
 *      400:
 *        $ref: '#/components/responses/InformationError'
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *      500:
 *        $ref: '#/components/responses/ValidationError'
 * 
 */

//reset-password

/**
 * @swagger
 * /api/users/reset-password:
 *   patch:
 *     summary: Reset password of a user if the user forgot the password
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               username:
 *                 type: string
 *                 example: user
 *               resetToken:
 *                 type: string
 *                 example: 123456
 *               newPassword:
 *                 type: string
 *                 example: 1234567
 *               confirmPassword:
 *                 type: string
 *                 example: 1234567
 *     responses:
 *       200:
 *         description: The password is reset successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Delete'
 *       400:
 *         $ref: '#/components/responses/InformationError'
 *       500:
 *         $ref: '#/components/responses/ValidationError' 
 *       404:
 *         $ref: '#/components/responses/NotFoundError'
 */

//upload-avatar

/**
 * @swagger
 * /api/users/upload-avatar:
 *   patch:
 *     summary: Upload avatar of current user
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         image/png:
 *           schema:
 *             type: string
 *             format: base64
 *     responses:
 *       200:
 *         description: The avatar is uploaded successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: success
 *                 data:
 *                   $ref: '#/components/schemas/User'
 *                 file:
 *                   type: object
 *                   properties:
 *                     fieldname:
 *                       type: string
 *                       example: avatar
 *                     originalname:
 *                       type: string
 *                       example: avatar.png
 *                     encoding:
 *                       type: string
 *                       example: 7bit
 *                     mimetype:
 *                       type: string
 *                       example: image/png
 *                     destination:
 *                       type: string
 *                       example: public/images
 *                     filename:
 *                       type: string
 *                       example: 63fed905251065a7825e8bfe-avatar.png
 *                     path:
 *                       type: string
 *                       example: public/images/63fed905251065a7825e8bfe-avatar.png
 *                     size:
 *                       type: integer
 *                       example: 12345
 *       400:
 *         $ref: '#/components/responses/InformationError'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       500:
 *         $ref: '#/components/responses/ValidationError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError'         
 */

//vip

/**
 * @swagger
 * /api/users/vip:
 *  post:
 *    summary: Buy vip for current user
 *    tags: [Users]
 *    security:
 *      - bearerAuth: []
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            type: object
 *            properties:
 *              id:
 *               type: string
 *               example: 63ff190045f46762ab44b4e6
 *    responses:
 *      200:
 *        description: The vip is bought successfully
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  example: success
 *                data:
 *                  $ref: '#/components/schemas/User'
 *      400:
 *        $ref: '#/components/responses/InformationError'
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *      500:
 *        $ref: '#/components/responses/ValidationError'
 *      404:
 *        $ref: '#/components/responses/NotFoundError'
 */

//item

/**
 * @swagger
 * /api/users/item:
 *   post:
 *     summary: Buy items for current user
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: array
 *             items:
 *               type: object
 *               properties:
 *                 id:
 *                   type: string
 *                   example: 63fdd1a9d8620449707ef599
 *                 quantity:
 *                   type: integer
 *                   example: 1
 *     responses:
 *       200:
 *         description: The items are bought successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: success
 *                 bought_items:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       id:
 *                         type: string
 *                         example: 63fdd1a9d8620449707ef599
 *                       quantity:
 *                         type: integer
 *                         example: 1
 *       400:
 *         $ref: '#/components/responses/InformationError'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       500:
 *         $ref: '#/components/responses/ValidationError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError' 
 */

//add-money

/**
 * @swagger
 * /api/users/add-money:
 *   patch:
 *     summary: Add money for current user
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               money:
 *                 type: integer
 *                 example: 1000
 *               creditCard:
 *                 type: string
 *                 example: 5176337919768203
 *     responses:
 *      200:
 *        description: The money is added successfully
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  example: success
 *                data:
 *                  $ref: '#/components/schemas/User'
 *      400:
 *        $ref: '#/components/responses/InformationError'
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *      500:
 *        $ref: '#/components/responses/ValidationError'
 *      404:
 *        $ref: '#/components/responses/NotFoundError'  
 */

//transfer

/**
 * @swagger
 * /api/users/transfer:
 *   get:
 *     summary: Get the transfer history of current user
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: The transfer history is returned successfully
 *         content:
 *           application/json:
 *             schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  example: success
 *                data:
 *                  type: array
 *                  items:
 *                    $ref: '#/components/schemas/TransferOutput'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *   patch:
 *     summary: Transfer money to another user
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               receiver:
 *                 type: string
 *                 example: 63fdd1a9d8620449707ef599
 *               money:
 *                 type: number
 *                 example: 1000
 *               note:
 *                 type: string
 *                 example: "Thank you"
 *     responses:
 *       200:
 *         description: The transfer is done successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: success
 *                 data:
 *                   $ref: '#/components/schemas/TransferOutput'
 *       400:
 *         $ref: '#/components/responses/InformationError'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       500:
 *         $ref: '#/components/responses/ValidationError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError'
 */

// /

/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: Get all users
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: The users are returned successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: success
 *                 results:
 *                   type: integer
 *                   example: 2
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/User'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       403:
 *         $ref: '#/components/responses/AdminUnauthorizedError'
 */

// /:id

/**
 * @swagger
 * /api/users/{id}:
 *   get:
 *     summary: Get a user based on id
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The user id
 *     responses:
 *       200:
 *         description: The user of that id is returned successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: success
 *                 data:
 *                   $ref: '#/components/schemas/User'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       403:
 *         $ref: '#/components/responses/AdminUnauthorizedError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError'
 *   put:
 *     summary: Update a user based on id
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The user id
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *              name:
 *                type: string
 *                maxLength: 40
 *              email:
 *                type: string
 *                format: email
 *              avatar:
 *                type: string
 *              role:
 *                type: string
 *                enum: [user, admin]
 *              phone:
 *                type: string
 *                maxLength: 11
 *                pattern: ^[0-9]{10,11}$
 *              username:
 *                type: string
 *                description: The username of the user
 *                maxLength: 40
 *                unique: true
 *              password:
 *                type: string
 *                minLength: 6
 *                format: password
 *              money:
 *                type: number
 *                minimum: 0
 *              hasBought:
 *                description: The list of items which the user has bought 
 *                type: array
 *                items:
 *                  type: object
 *                  properties:
 *                    item: 
 *                      $ref: '#/components/schemas/Item'
 *                    time:
 *                      type: string
 *                      format: date-time
 *                    quantity:
 *                      type: number
 *                      minimum: 1
 *              vip:
 *                $ref: '#/components/schemas/Vip'
 *              expiredDate:
 *                type: string
 *                format: date-time
 *     responses:
 *       200:
 *         description: The user of that id is updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: success
 *                 data:
 *                   $ref: '#/components/schemas/User'
 *       400:
 *         $ref: '#/components/responses/InformationError'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       403:
 *         $ref: '#/components/responses/AdminUnauthorizedError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError'
 *       500:
 *         $ref: '#/components/responses/ValidationError'
 *   delete:
 *     summary: Delete a user based on id
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The user id
 *     responses:
 *       200:
 *         description: The user of that id is deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Delete'
 *       401:
 *         $ref: '#/components/responses/UnauthorizedError'
 *       403:
 *         $ref: '#/components/responses/AdminUnauthorizedError'
 *       404:
 *         $ref: '#/components/responses/NotFoundError' 
 */

userRouter.route('/login').post(authController.login);
userRouter.route('/register').post(authController.register);
userRouter.route('/token').get(authController.refreshToken);

// Protect all routes after this middleware
userRouter.use(authController.protect);

userRouter.route('/me')
.get(userController.getCurrentUser)
.patch(userController.updateCurrentUser);

userRouter.route('/change-password')
.patch(authController.changePassword);

userRouter.route('/reset-password')
.patch(authController.resetPassword);

userRouter.route('/upload-avatar')
.patch(userController.uploadAvatar);

userRouter.route('/vip')
.post(userController.buyVip);

userRouter.route('/item')
.post(userController.buyItem);

userRouter.route('/add-money')
.patch(userController.addMoney);

userRouter.route('/transfer')
.get(transferController.getUserTransfer)
.post(userController.sendMoney)

// Restrict all routes after this middleware to admin only
userRouter.use(authController.restrictTo('admin'));

userRouter.route('/')
.get(userController.getAllUsers)


userRouter.route('/:id')
.get(userController.getUser)
.put(userController.updateUser)
.delete(userController.deleteUser);

module.exports = userRouter;
