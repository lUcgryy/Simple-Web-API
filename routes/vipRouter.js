const express = require('express');
const vipRouter = express.Router();
const vipController = require('../controllers/vipController');
const authController = require('../controllers/authController');

/**
 * @swagger
 * components:
 *   schemas:
 *     Vip:
 *       type: object
 *       required:
 *         - _id
 *         - type
 *         - price
 *         - discount
 *         - duration
 *         - __v
 *       properties:
 *         _id:  
 *           type: string
 *           description: The auto-generated id of the vip
 *         type:
 *           type: string
 *           description: The type of the vip
 *         price:
 *           type: number
 *           description: The price of the vip
 *         description:
 *           type: string
 *           description: The description of the vip
 *         discount:
 *           type: number
 *           description: The item's discount when the vip is applied
 *         duration:
 *           type: integer
 *           description: The duration of the vip (in months)
 *         __v:
 *           type: integer
 *           description: The version key of the vip that is automatically generated by MongoDB
 *       example:
 *         _id: 63ff190045f46762ab44b4e6
 *         type: Month
 *         price: 200
 *         description: You will get 30% discount on all items
 *         discount: 0.3
 *         duration: 1
 *         __v: 0
 */

/**
 * @swagger
 * tags:
 *   name: Vips
 *   description: The vip managing API
*/

/**
 * @swagger
 * /api/vips:
 *  get:
 *    summary: Returns the list of all the vips
 *    tags: [Vips]
 *    security: 
 *      - bearerAuth: []
 *    responses:
 *      200:
 *        description: The list of the vips
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  description: The status of the response
 *                  example: success
 *                results:
 *                  type: integer
 *                  description: The number of vips
 *                data:
 *                  type: array
 *                  description: The data of the created items
 *                  items:          
 *                    $ref: '#/components/schemas/Item'
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *  post:
 *    summary: Create a list of vips
 *    tags: [Vips]
 *    security:
 *      - bearerAuth: []
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            type: array
 *            items:
 *              type: object
 *              properties:
 *                type:
 *                  type: string
 *                  description: The type of the vip
 *                price:
 *                  type: number
 *                  description: The price of the vip
 *                description:
 *                  type: string
 *                  description: The description of the vip
 *                discount:
 *                  type: number
 *                  description: The item's discount when the vip is applied
 *                duration:
 *                  type: integer
 *                  description: The duration of the vip (in months)
 *            example:
 *              - type: Month
 *                price: 200
 *                description: You will get 30% discount on all items
 *                discount: 0.3
 *                duration: 1
 *              - type: Year
 *                price: 1500
 *                description: You will get 30% discount on all items
 *                discount: 0.3
 *                duration: 12
 *    responses:
 *      201:
 *        description: The vip was successfully created
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  description: The status of the response
 *                  example: success
 *                data:
 *                  type: array
 *                  description: The data of the created items
 *                  items:
 *                    $ref: '#/components/schemas/Vip'            
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *      403:
 *        $ref: '#/components/responses/AdminUnauthorizedError'
 *      500:
 *        $ref: '#/components/responses/ValidationError'
 *  delete:
 *    summary: Delete all vips
 *    tags: [Vips]
 *    security:
 *      - bearerAuth: []
 *    responses:
 *      200:
 *        description: All the vips were successfully deleted
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Delete'
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *      403:
 *        $ref: '#/components/responses/AdminUnauthorizedError' 
 * 
 */

/**
 * @swagger
 * /api/vips/{id}:
 *  get:
 *    summary: Get the vip by id
 *    tags: [Vips]
 *    security:
 *      - bearerAuth: []
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: The vip id
 *    responses:
 *      200:
 *        description: The vip description by id
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  description: The status of the response
 *                  example: success
 *                data:
 *                  type: array
 *                  description: The data of the created items
 *                  items:
 *                    $ref: '#/components/schemas/Vip' 
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *      404:
 *        $ref: '#/components/responses/NotFoundError'
 *  put:
 *    summary: Update the vip by the id
 *    tags: [Vips]
 *    security:
 *      - bearerAuth: []
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: The item id
 *    requestBody:
 *      required: true
 *      content:
 *        application/json:
 *          schema:
 *            type: object
 *            properties:
 *              type:
 *                type: string
 *                description: The type of the vip
 *              price:
 *                type: number
 *                description: The price of the vip
 *              description:
 *                type: string
 *                description: The description of the vip
 *              discount:
 *                type: number
 *                description: The item's discount when the vip is applied
 *              duration:
 *                type: integer
 *                description: The duration of the vip (in months)
 *            example:
 *              type: Month
 *              price: 200
 *              description: You will get 30% discount on all items
 *              discount: 0.3
 *              duration: 1  
 *    responses:
 *      200:
 *        description: The vip was updated
 *        content:
 *          application/json:
 *            schema:
 *              type: object
 *              properties:
 *                status:
 *                  type: string
 *                  description: The status of the response
 *                  example: success
 *                data:
 *                  type: array
 *                  description: The data of the created items
 *                  items:
 *                    $ref: '#/components/schemas/Vip' 
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *      403:
 *        $ref: '#/components/responses/AdminUnauthorizedError'
 *      404:
 *        $ref: '#/components/responses/NotFoundError'
 *      500:
 *        $ref: '#/components/responses/ValidationError'
 *  delete:
 *    summary: Remove the vip by id
 *    tags: [Vips]
 *    security:
 *      - bearerAuth: []
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: The item id
 *    responses:
 *      200:
 *        description: The vip was deleted
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/Delete'
 *      401:
 *        $ref: '#/components/responses/UnauthorizedError'
 *      403:
 *        $ref: '#/components/responses/AdminUnauthorizedError'
 *      404:
 *        $ref: '#/components/responses/NotFoundError'       
 */


// User routes
vipRouter.use(authController.protect);
vipRouter.route('/').get(vipController.getAllVips);
vipRouter.route('/:id').get(vipController.getVip);

// Admin routes
vipRouter.use(authController.restrictTo('admin'));

vipRouter.route('/')
.post(vipController.createVip)
.delete(vipController.deleteAllVips);

vipRouter.route('/:id')
.put(vipController.updateVip)
.delete(vipController.deleteVip);
// vipRouter.route('/')
// .get(vipController.getAllVips)
// .post(vipController.createVip)
// .put((req, res) => {
//     res.status(405).json({
//         status: 'fail',
//         message: 'Method not allowed'
//     });
// })
// .delete(vipController.deleteAllVips);

// vipRouter.route('/:id')
// .get(vipController.getVip)
// .post((req, res) => {
//     res.status(405).json({
//         status: 'fail',
//         message: 'Method not allowed'
//     });
// })
// .put(vipController.updateVip)
// .delete(vipController.deleteVip);

module.exports = vipRouter;